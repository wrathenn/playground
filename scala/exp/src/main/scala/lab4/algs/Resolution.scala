package com.wrathenn.exp
package lab4.algs

import Unification.{Substitution, Result => UniResult}
import lab4.algs.cnf.{AlgsCNF, NamePurifier}
import lab4.model.Disjunct.{Predicate, Atom}
import lab4.model.{Disjunct, Expr}

import cats.data.NonEmptyList
import cats.syntax.all._

import scala.annotation.tailrec

object Resolution {

  private sealed trait Result
  private object Result {
    object Success extends Result
    object Failure extends Result
  }

  private def applySubstitutions(predicate: Predicate, subtitutions: List[Substitution[Atom]]): Predicate = {
    val newArgs = predicate.args.map {
      case pred@(_: Disjunct.Const) => pred
      case pred@(_: Disjunct.Variable) =>
        subtitutions.foldLeft[Atom](pred) { case (acc, subst) =>
          acc match {
            case variable: Disjunct.Variable =>
              if (subst.from == variable) subst.to else acc
            case _: Disjunct.Const => acc
          }
        }
    }
    predicate.copy(args = newArgs)
  }

  private def spreadUnificationResult(disjunct: Disjunct, substitutions: List[Substitution[Atom]]): Disjunct = {
    val newOver = disjunct.over.map(applySubstitutions(_, substitutions))
    disjunct.copy(over = newOver)
  }

  private def findResolvent(
    d1: Disjunct, d2: Disjunct,
    p1: Predicate, p2: Predicate,
    substitutions: List[Substitution[Atom]],
  ): Option[Disjunct] = {
    val d1NoP1 = d1.over.filter(_ != p1)
    val d2NoP2 = d2.over.filter(_ != p2)

    val concatedSrcPreds = NonEmptyList.fromList(d1NoP1 ++ d2NoP2) match {
      case Some(value) => value
      case None => return None
    }
    val concated = Disjunct(over = concatedSrcPreds)

    val spreadedResult = spreadUnificationResult(concated, substitutions)
    spreadedResult.some
  }

  // Either doesn't carry error/correct meaning here
  private def resolveDisjuncts(d1: Disjunct, d2: Disjunct): Either[Result, Disjunct] = {
    for {
      p1 <- d1.over
      p2 <- d2.over

      _ = Dbg.debugLn(s"üîç –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è $p1 –∏ $p2")

      notP2 = p2.copy(isNegative = !p2.isNegative)
      unificationResult = Dbg.indented { Unification.unify(p1, notP2) }
      _ = unificationResult match {
        case UniResult.Success(substitutions) => {
          return findResolvent(d1, d2, p1, p2, substitutions).toRight { Result.Success }
        }
        case UniResult.Failure => {}
      }
    } yield {}

    Result.Failure.asLeft
  }

  @tailrec
  private def resolution(
    // –î–∏–∑—ä—é–Ω–∫—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–Ω–µ–µ —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Ä–Ω—ã–µ –ø–∞—Ä—ã (–æ–Ω–∏ –±—ã–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ currentDisjunct)
    processedDisjuncts: List[Disjunct],
    // –î–∏–∑—ä—é–Ω–∫—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–∞—Ä–Ω–∞—è –ø–∞—Ä–∞
    currentDisjunct: Disjunct,
    // –î–∏–∑—ä—é–Ω–∫—Ç—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç—Ä–∞—Ä–Ω—É—é –ø–∞—Ä—É —Å currentDisjunct
    checkedDisjuncts: List[Disjunct],
    // –î–∏–∑—ä—é–Ω–∫—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—â–µ –Ω–∞–¥–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Ä–Ω—É—é –ø–∞—Ä—É —Å currentDisjunct
    nextDisjuncts: List[Disjunct],
  ): Boolean = {
    if (nextDisjuncts.isEmpty && checkedDisjuncts.isEmpty) {
      Dbg.debugLn(s"–ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞—Ä–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–∏–∑—ä—é–Ω–∫—Ç–∞ $currentDisjunct")
      return false
    }

    if (nextDisjuncts.isEmpty) {
      Dbg.debugLn(s"–ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞—Ä–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –¥–∏–∑—ä—é–Ω–∫—Ç–∞ $currentDisjunct")
      dbgDisjuncts((processedDisjuncts :+ currentDisjunct) ++ checkedDisjuncts)
      resolution(processedDisjuncts :+ currentDisjunct, checkedDisjuncts.head, List(), checkedDisjuncts.tail)
    } else {

      val nextDisjunct = nextDisjuncts.head
      val resolventResult = Dbg.indented {
        resolveDisjuncts(currentDisjunct, nextDisjunct)
      }
      val addedDisjuncts: List[Disjunct] = resolventResult match {
        case Right(resolvent) => {
          Dbg.debugLn(s"–†–µ–∑–æ–ª—å–≤–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: $resolvent, –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∏–∑—ä—é–Ω–∫—Ç–æ–≤")
          if (processedDisjuncts.contains(resolvent) || checkedDisjuncts.contains(resolvent) || nextDisjuncts.contains(resolvent)) {
            Dbg.debugLn(s"–î–∏–∑—ä—é–Ω–∫—Ç —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ.")
            List()
          } else List(resolvent)
        }
        case Left(Result.Success) => {
          println(s"–í—ã–≤–µ–¥–µ–Ω –ø—É—Å—Ç–æ–π –¥–∏–∑—ä—é–Ω–∫—Ç")
          return true
        }
        case Left(Result.Failure) => List()
      }

      resolution(processedDisjuncts, currentDisjunct, checkedDisjuncts :+ nextDisjunct, nextDisjuncts.tail ++ addedDisjuncts)
    }
  }

  private def dbgDisjuncts(disjuncts: List[Disjunct]): Unit = {
    disjuncts.toList.zipWithIndex.foreach { case (d, i) =>
      Dbg.debugLn(s"$i) $d")
    }
  }

  def resolve(data: List[Expr], conclusion: Expr): Boolean = {
    Dbg.debugLn("–ù–∞—á–∞–ª–æ —Ä–µ–∑–æ–ª—é—Ü–∏–∏")
    val notConclusion = Expr.~~(conclusion)
    Dbg.debugLn(s"–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ —Ü–µ–ª–∏: $notConclusion")

    val disjunctNamePurifier = new NamePurifier()
    val disjuncts = (data :+ notConclusion)
      .flatMap { e => AlgsCNF.convertToCnf(e) }
      .map(disjunctNamePurifier.purify)
      .toNel.getOrElse { return false }

    Dbg.debugLn(s"–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∏–∑—ä—é–Ω–∫—Ç–æ–≤:")
    dbgDisjuncts(disjuncts.toList)

    resolution(List(), disjuncts.head, List(), disjuncts.tail)
  }

}
