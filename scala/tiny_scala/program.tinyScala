case class List[A](
    element: A,
    next: List[A],
)

object ListF {
  def prepended[A](elem: A, list: List[A]): List[A] = {
    new List[A](elem, list)
  }

  def appended[A](list: List[A], elem: A): List[A] = {
    if (list == null) {
       new List[A](elem, null)
    } else {
      val nextNode: List[A] = ListF.appended[A](list.next, elem)
      new List[A](list.element, nextNode)
    }
  }

  def printList[A](list: List[A], fmt: String): Unit = {
    if (list == null) {
      print("\n")
      return
    }
    print(fmt, list.element)
    ListF.printList[A](list.next, fmt)
  }

  def insertIntoSorted[A](elem: A, list: List[A]): List[A] = {
    if (list == null) return new List[A](elem, null)

    if (elem < list.element) return ListF.prepended[A](elem, list)

    val part: List[A] = ListF.insertIntoSorted[A](elem, list.next)
    new List[A](list.element, part)
  }

  def __sorted[A](list: List[A], res: List[A]): List[A] = {
    if (list == null) {
      return res
    }

    val newRes: List[A] = ListF.insertIntoSorted[A](list.element, res)
    ListF.__sorted[A](list.next, newRes)
  }

  def sorted[A](list: List[A]): List[A] = ListF.__sorted[A](list, null)
}

object Test extends App {
  var list: List[Int] = null

  var c: Int = 0
  while (!(c == 100)) {
    list = ListF.prepended[Int](c, list)
    c = c + 1
  }
  ListF.printList[Int](list, "%d, ")

  var i: Int = 0
  while (!(i == 10000)) {
    val sorted: List[Int] = ListF.sorted[Int](list)
    i = i + 1
  }
  print("Finished %d sortings\n", i)
}
